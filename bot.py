from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests, json, os
from contract_model import Contract
from rapidfuzz import process
from datetime import date
import locale
import pandas as pd

locale.setlocale(locale.LC_TIME, "Russian_Russia.1251")  # Windows fallback

OLLAMA_URL = "http://localhost:11434/api/generate"
# BOT_TOKEN = "7741269885:AAF8n3VrWkHYRoxCgdTtZ4rAFDjuYM9uMkU"
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATA_DIR = os.path.join(os.path.dirname(__file__), 'data')
CONTRACTS_PATH = os.path.join(DATA_DIR, 'contracts.json')

today = date.today().strftime("%d %B %Y")

SYSTEM_PROMPT = f"""
Today is {today}.
You are a helpful assistant that explains GoCrowd contract and payment information to the user in plain Russian. The user is a lender to companies.
- All currency is in Kazakhstani tenge (‚Ç∏).
- Interest rates are annual, and should be shown as percentages, e.g. 12% –≥–æ–¥–æ–≤—ã—Ö.
- Dates should be shown in Russian format, like "5 –∞–≤–≥—É—Å—Ç–∞ 2025".
- Do not mention internal variables like 'principal' or 'interest_rate'.
- Explain clearly as if you're speaking to a regular person, not a programmer.
- Do not refer to or describe any source code or JSON structure.
- When referring to the user, use capitalized "–í—ã" instead of "–≤—ã" and all the other variations like "–í–∞–º", "–í–∞—à", etc.
"""

def load_contracts() :
    if os.path.exists(CONTRACTS_PATH) :
        with open(CONTRACTS_PATH, "r", encoding="utf-8") as f :
            return json.load(f)
    return []

def ask_ollama(user_prompt: str) :
    prompt = f"{SYSTEM_PROMPT}\n\n{user_prompt}"
    response = requests.post(OLLAMA_URL, json={"model": "mistral", "prompt": prompt, "stream": False})
    return response.json()["response"]

# /help handler
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) :
    commands = [
        "/summary ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º",
        "/schedule ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤—ã–ø–ª–∞—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É",
        "/ask ‚Äì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–± –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö",
        "/next ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –≤—ã–ø–ª–∞—Ç—É",
        "/thismonth ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤—ã–ø–ª–∞—Ç—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
        "/help ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é"
    ]
    await update.message.reply_text("\n".join(commands))

# /start handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) :
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ –Ω–∞ GoCrowd. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

# /summary handler
# async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE) :
#     await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
#     contracts = load_contracts()
#     prompt = f"""
#         –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤–∫–ª—é—á–∞—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä repayment_start_month ‚Äî —ç—Ç–æ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–≥–∞—à–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–ª–≥–∞.
#         –î–æ —ç—Ç–æ–≥–æ –ø–ª–∞—Ç—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã.
#         –ü–æ–∫–∞–∂–∏ —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º –Ω–∏–∂–µ.
#         {json.dumps(contracts, indent=2, ensure_ascii=False)}
#     """
#     reply = ask_ollama(prompt)
#     await update.message.reply_text(reply)

async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE) :
    manager = context.bot_data["manager"]
    lines = []
    for idx, contract in enumerate(manager.contracts) :
        summ = contract.summary()
        my_date = date.fromisoformat(summ["start_date"]).strftime("%d %B %Y")
        lines.append(
            f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç {idx+1}:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {summ["name"]}\n"
            f"–û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥: {summ["principal"]} ‚Ç∏\n"
            f"–°—Ç–∞–≤–∫–∞: {summ["interest_rate"]*100}%\n"
            f"–°—Ä–æ–∫: {summ["duration_months"]}\n"
            f"–ú–µ—Å—è—Ü –ø–æ–≥–∞—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–ª–≥–∞: {summ["repayment_start_month"]}\n"
            f"–î–∞—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {my_date}\n"
        )

    message = "\n".join(lines)
    await update.message.reply_text(message)

# /ask handler
async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE) :
    question = " ".join(context.args)
    contracts = load_contracts()
    prompt = f"{question}\n\n–í–æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã:\n{json.dumps(contracts, indent=2, ensure_ascii=False)}"
    reply = ask_ollama(prompt)
    await update.message.reply_text(reply)

# /schedule <contract_name> handler
async def schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) :
    args = context.args
    if not args :
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.")
        return
    
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    
    contract_name = " ".join(args)
    contracts_data = load_contracts()
    contract_names = [c['name'] for c in contracts_data]

    matches = process.extractOne(contract_name, contract_names, score_cutoff=60)

    if not matches :
        await update.message.reply_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    
    best_match_name, score, idx = matches
    matched_contract_dict = contracts_data[idx]
    contract = Contract.from_dict(matched_contract_dict)
    schedule = contract.get_schedule()
    for row in schedule :
        row["date"] = row["date"].strftime("%d %B %Y")
    df = pd.DataFrame(schedule)
    text = df.to_markdown(index=False)
    prompt = f"""
        –í–æ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤—ã–ø–ª–∞—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É "{contract.name}":

        {text}

        –í—ã–≤–µ–¥–∏ —ç—Ç–æ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤ –≤–∏–¥–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ø—É–Ω–∫—Ç–∞–º –ë–ï–ó —Ç–∞–±–ª–∏—Ü—ã, —á—Ç–æ–±—ã –±—ã–ª–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ (–¢–µ–ª–µ–≥—Ä–∞–º). –ù–µ —Å–æ–∫—Ä–∞—â–∞–π –¥–∞—Ç—É, —É–∫–∞–∂–∏ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ —Ç–æ–∂–µ. –ù–µ –ø–∏—à–∏ –ª–∏—à–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã/—Å–ª–æ–≤–∞.
        –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:
        1. 1 –Ø–Ω–≤–∞—Ä–∞ 2025 - –¥–∞–Ω–Ω—ã–µ
        
        2. 1 –§–µ–≤—Ä–∞–ª—è 2025 - –¥–∞–Ω–Ω—ã–µ
    """
    reply = ask_ollama(prompt)
    await update.message.reply_text(reply)

# /next handler
async def next_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) :
    manager = context.bot_data["manager"]
    today = date.today()
    all_upcoming = []

    for contract in manager.contracts :
        schedule = contract.get_schedule()
        future_payments = [p for p in schedule if p["date"] >= today]

        if future_payments :
            next_pay = min(future_payments, key=lambda x: x["date"])
            all_upcoming.append((next_pay["date"], contract.name, next_pay))
    
    if not all_upcoming :
        await update.message.reply_text("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—ã–ø–ª–∞—Ç –Ω–µ—Ç.")
        return
    
    all_upcoming.sort(key=lambda x: x[0])
    payment_date, contract_name, payment = all_upcoming[0]

    formatted = (
        f"–ë–ª–∏–∂–∞–π—à–∞—è –≤—ã–ø–ª–∞—Ç–∞:\n"
        f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {contract_name}\n"
        f"–î–∞—Ç–∞: {payment_date.strftime('%d %B %Y')}\n"
        f"–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {payment['total']} ‚Ç∏\n"
        f"–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {payment['remaining_principal']} ‚Ç∏\n"
    )

    await update.message.reply_text(formatted)

# /thismonth handler
async def this_month(update: Update, context: ContextTypes.DEFAULT_TYPE) :
    today = date.today()
    current_year = today.year
    current_month = today.month

    manager = context.bot_data["manager"]
    payments_this_month = []

    for contract in manager.contracts :
        schedule = contract.get_schedule()
        for p in schedule :
            d = p["date"]
            if d.year == current_year and d.month == current_month :
                payments_this_month.append({
                    "date": d,
                    "contract": contract.name,
                    "payment": p["total"],
                    "principal": p["remaining_principal"]
                })

    if not payments_this_month :
        await update.message.reply_text("–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—ã–ø–ª–∞—Ç.")
        return
    
    payments_this_month.sort(key=lambda x: x["date"])

    text = "–í—ã–ø–ª–∞—Ç—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:\n\n"
    for p in payments_this_month :
        text += (
            f"üî∏ {p['date'].strftime('%d %B %Y')} ‚Äî ¬´{p['contract']}¬ª\n"
            f"  üí∞ –ü–ª–∞—Ç—ë–∂: {p['payment']} ‚Ç∏  |  üìâ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {p['principal']} ‚Ç∏\n\n"
        )

    await update.message.reply_text(text.strip())


# Main app
if __name__ == "__main__" :
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    from contract_manager import ContractManager
    manager = ContractManager()
    manager.load_from_file()

    app.bot_data["manager"] = manager

    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("summary", summary))
    app.add_handler(CommandHandler("ask", ask))
    app.add_handler(CommandHandler("schedule", schedule))
    app.add_handler(CommandHandler("next", next_payment))
    app.add_handler(CommandHandler("thismonth", this_month))

    print("Bot is running...")
    app.run_polling()